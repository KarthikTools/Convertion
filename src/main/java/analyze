// ---- Config (set these as Collection/Environment variables for security) ----
const authType = pm.collectionVariables.get('authType') || 'bearer'; // 'bearer', 'basic', 'oauth2'

// Optional for OAuth2
const tokenUrl = pm.collectionVariables.get('tokenUrl');
const clientId = pm.collectionVariables.get('clientId');
const clientSecret = pm.collectionVariables.get('clientSecret');
const scope = pm.collectionVariables.get('scope');
const grantType = 'client_credentials';

// Optional for Basic
const basicUser = pm.collectionVariables.get('basicUser');
const basicPass = pm.collectionVariables.get('basicPass');

// Optional for static Bearer
const staticToken = pm.collectionVariables.get('staticBearerToken');

function setBearerToken(token) {
    pm.collectionVariables.set('bearerToken', token);
    pm.request.headers.upsert({key: "Authorization", value: "Bearer " + token});
}

function setBasicAuth(user, pass) {
    const encoded = btoa(user + ':' + pass);
    pm.collectionVariables.set('basicAuth', encoded);
    pm.request.headers.upsert({key: "Authorization", value: "Basic " + encoded});
}

function getOAuthToken(cb) {
    pm.sendRequest({
        url: tokenUrl,
        method: 'POST',
        header: { 'Content-Type': 'application/x-www-form-urlencoded' },
        body: {
            mode: 'urlencoded',
            urlencoded: [
                { key: 'grant_type', value: grantType },
                { key: 'client_id', value: clientId },
                { key: 'client_secret', value: clientSecret },
                { key: 'scope', value: scope }
            ]
        }
    }, function (err, res) {
        if (!err && res.code === 200) {
            const token = res.json().access_token;
            setBearerToken(token);
            cb && cb(token);
        } else {
            console.error("OAuth2 token error:", err || res);
        }
    });
}

function getAuthHeader() {
    if (authType === 'bearer') {
        // Static bearer
        setBearerToken(staticToken);
    } else if (authType === 'basic') {
        setBasicAuth(basicUser, basicPass);
    } else if (authType === 'oauth2') {
        // OAuth2
        getOAuthToken(); // async; be careful with timing
    } else {
        // fallback
        pm.request.headers.upsert({key: "Authorization", value: ""});
    }
}

// ---- Call the handler before each request ----
getAuthHeader();
