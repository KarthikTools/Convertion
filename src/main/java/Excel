**Postman API Testing Guide: Setting Up Authentication at Collection Level**

This guide is intended for new QA engineers, testers, and developers who are getting started with API testing in Postman. It explains how to configure different authentication methodsâ€”OAuth2.0, Basic Auth, and Bearer Tokenâ€”at the collection level, making your testing workflow secure and reusable.

---

### âœ… Overview
Most APIs require authentication to access protected endpoints. Postman allows you to handle authentication automatically at the **collection level**, so you don't have to set it up individually in every request.

This guide covers how to set up the following authentication types:
- OAuth 2.0 (Client Credentials Flow)
- Basic Authentication
- Static Bearer Token

With the setup in this guide:
- Tokens or credentials are centralized and secure
- Auth headers are added automatically to all requests
- You can run individual or full collections without manual changes

---

### âœ… Step-by-Step Instructions

#### â‘  Create a New Collection
1. Open Postman.
2. Click **Collections** in the left sidebar.
3. Click **New Collection** and give it a name (e.g., `My API Tests`).
4. Click **Edit** to configure settings.

---

#### â‘¡ Configure Authorization
1. Inside the **Edit Collection** dialog, go to the **Authorization** tab.
2. Set:
   - **Type:** `Bearer Token`
   - **Token:** `{{bearerToken}}`
3. Click **Save**.

> ðŸ”Ž Even for Basic Auth or OAuth2.0, we use `Bearer Token` here because the actual token or header will be dynamically set using a script.

---

#### â‘¢ Set Collection Variables
Go to the **Collection â†’ Variables** tab and add the following:

| Variable Name     | Purpose                                    | Example Value                                |
|-------------------|---------------------------------------------|----------------------------------------------|
| `authType`        | Type of auth: `oauth2`, `basic`, `bearer`   | `oauth2`                                     |
| `tokenUrl`        | OAuth2 token endpoint                       | `https://auth.example.com/oauth/token`       |
| `clientId`        | OAuth2 client ID                            | `abc123`                                     |
| `clientSecret`    | OAuth2 client secret                        | `secretXYZ`                                  |
| `scope`           | (Optional) OAuth2 scope                     | `read write`                                 |
| `basicUser`       | Username for Basic Auth                    | `admin`                                      |
| `basicPass`       | Password for Basic Auth                    | `password123`                                |
| `staticBearerToken`| Token value for static Bearer Token        | `eyJhbGciOiJIUzI1NiIsIn...`                  |
| `bearerToken`     | Auto-populated token used in all requests   | *(Leave blank)*                              |
| `tokenExpiry`     | Auto-populated expiry timestamp (epoch)     | *(Leave blank)*                              |

---

#### â‘£ Add Pre-request Script at Collection Level
Go to the **Pre-request Script** tab of the collection and paste the following logic:

```javascript
const authType = pm.collectionVariables.get("authType") || "oauth2";

if (authType === "bearer") {
    const token = pm.collectionVariables.get("staticBearerToken");
    pm.request.headers.upsert({ key: "Authorization", value: `Bearer ${token}` });
    console.log("Using static bearer token.");

} else if (authType === "basic") {
    const user = pm.collectionVariables.get("basicUser");
    const pass = pm.collectionVariables.get("basicPass");
    const encoded = btoa(`${user}:${pass}`);
    pm.request.headers.upsert({ key: "Authorization", value: `Basic ${encoded}` });
    console.log("Using Basic Auth header.");

} else if (authType === "oauth2") {
    const tokenUrl = pm.collectionVariables.get("tokenUrl");
    const clientId = pm.collectionVariables.get("clientId");
    const clientSecret = pm.collectionVariables.get("clientSecret");
    const scope = pm.collectionVariables.get("scope") || "";

    const expiry = parseInt(pm.collectionVariables.get("tokenExpiry"), 10);
    const now = Math.floor(Date.now() / 1000);
    const needsRefresh = !pm.collectionVariables.get("bearerToken") || isNaN(expiry) || now >= expiry;

    if (needsRefresh) {
        pm.sendRequest({
            url: tokenUrl,
            method: 'POST',
            header: { 'Content-Type': 'application/x-www-form-urlencoded' },
            body: {
                mode: 'urlencoded',
                urlencoded: [
                    { key: 'grant_type', value: 'client_credentials' },
                    { key: 'client_id', value: clientId },
                    { key: 'client_secret', value: clientSecret },
                    { key: 'scope', value: scope }
                ]
            }
        }, function (err, res) {
            if (!err && res.code === 200) {
                const token = res.json().access_token;
                const expiresIn = res.json().expires_in || 3600;
                pm.collectionVariables.set("bearerToken", token);
                pm.collectionVariables.set("tokenExpiry", now + expiresIn - 60);
                pm.request.headers.upsert({ key: "Authorization", value: `Bearer ${token}` });
                console.log("Fetched and applied new OAuth2 token.");
            } else {
                console.error("Failed to fetch OAuth2 token", err || res.text());
            }
        });
    } else {
        const token = pm.collectionVariables.get("bearerToken");
        pm.request.headers.upsert({ key: "Authorization", value: `Bearer ${token}` });
        console.log("Reusing valid OAuth2 token.");
    }
}
```

Click **Save**.

---

#### â‘¤ Add Your API Requests
1. Create your API requests (e.g., `GET /users`, `POST /items`) under the same collection.
2. Each request should:
   - Inherit authorization from the collection (default)
   - No additional auth code or headers required

---

### âœ… Testing It
1. Open **Postman Console**: `View > Show Postman Console`
2. Run any one request from the collection.
3. You should see logs like:
   - `Fetched and applied new OAuth2 token.`
   - `Reusing valid OAuth2 token.`
   - `Using Basic Auth header.`
   - `Using static bearer token.`

This confirms the correct flow is working based on your `authType` setting.

---

### âœ… FAQ
**Q: Can I run just one API instead of the whole collection?**  
Yes! The collection-level pre-request script runs even for a single request as long as it belongs to the collection.

**Q: Why did my request pass even after removing a variable?**  
Because tokens or credentials from previous runs are still cached in collection variables. Clear `bearerToken` or `tokenExpiry` to force a re-auth.

**Q: How do I change auth type for different environments?**  
You can set the `authType` (and related variables) in your environment and reuse this logic across all environments.

---

### âœ… Summary
| Feature                     | What It Enables                              |
|-----------------------------|----------------------------------------------|
| Centralized Auth Control    | Auth logic in one place                      |
| Supports Multiple Methods   | OAuth2, Basic, and Static Bearer             |
| Automatic Token Refresh     | OAuth2 tokens auto-fetched and refreshed     |
| One-Click Test Runs         | Works for full collections or single calls   |

Use this setup to save time, reduce errors, and onboard your teammates faster into a secure, maintainable API testing workflow.

