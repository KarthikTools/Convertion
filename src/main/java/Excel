"""
You are enhancing a Python script that converts ReadyAPI test steps to Postman v2.1 format.

The input is an XML file from ReadyAPI. Each test step can be of type 'restrequest', 'graphql', or others like 'transfer' or 'groovy'.

Hereâ€™s a sample input XML of a REST request that uses a GraphQL payload:

<con:testStep type="restrequest" name="GetUserGraphQL">
    <con:config>
        <con:restRequest>
            <con:originalUri>https://api.example.com/graphql</con:originalUri>
            <con:method>POST</con:method>
            <con:request>
                {
                  "query": "query GetUser($id: ID!) { user(id: $id) { name email } }",
                  "variables": { "id": "123" }
                }
            </con:request>
            <con:parameters/>
        </con:restRequest>
        <con:headers>
            <con:entry key="Content-Type" value="application/json"/>
        </con:headers>
    </con:config>
</con:testStep>

TASK:
1. Inside the block that handles 'restrequest' test steps:
   - Detect if the body content is a GraphQL request.
     - It should be a JSON string with a top-level 'query' key.
2. If it's GraphQL:
   - Format the Postman request like this:
     - method: POST
     - url: same as <originalUri>
     - headers: include 'Content-Type: application/json'
     - body: use the entire JSON string with 'query' and 'variables'
3. Do NOT create a new condition like 'if step_type == "graphql"'
4. Instead, detect GraphQL from the 'restrequest' body content inside the same conditional block.

You can use:
- json.loads() to check if body is JSON and contains 'query'
- convert_readyapi_vars_to_postman() to sanitize variables

Output: Postman-compliant request item dictionary that includes appropriate GraphQL handling.
"""
