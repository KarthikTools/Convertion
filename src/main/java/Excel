def extract_datasink_script(config):
    """
    Convert ReadyAPI DataSink into Postman test script lines.
    It captures values from previous responses and stores them in variables.
    """
    script_lines = []
    properties = config.findall('.//con:property', ns)
    for prop in properties:
        name = prop.findtext('con:name', namespaces=ns)
        raw_expr = prop.findtext('con:value', namespaces=ns)

        if not name or not raw_expr:
            continue

        # Normalize and extract variable name expression
        expr = convert_readyapi_vars_to_postman(raw_expr)

        if '["' in expr or "." in expr:
            # Assume it's a JSON expression and use pm.response.json()
            script_lines.append(f"pm.collectionVariables.set('{name}', _.get(pm.response.json(), '{expr}'));")
        elif '//' in expr:
            # Assume it's XPath (not directly supported, warn)
            script_lines.append(f"// TODO: Convert XPath expression for {name} manually: {expr}")
        else:
            script_lines.append(f"pm.collectionVariables.set('{name}', {expr});")
    return script_lines


elif step_type == "datasink":
                    config = test_step.find('con:config', ns)
                    sink_script = extract_datasink_script(config)
                    if last_rest_step and sink_script:
                        last_rest_step.setdefault("event", [])
                        last_rest_step["event"].append({
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": sink_script
                            }
                        })
