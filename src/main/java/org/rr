import xml.etree.ElementTree as ET
import json
import re

# Namespace for ReadyAPI
ns = {'con': 'http://eviware.com/soapui/config'}

def convert_readyapi_vars_to_postman(value: str) -> str:
    """
    Converts ReadyAPI variable references of the form:
      ${#TestSuite#requestid} or ${requestid}
    into Postman variables of the form:
      {{requestid}}
    """
    if not value:
        return value

    pattern = re.compile(r'\$\{([^}]+)\}')
    def replacer(match):
        # match.group(1) might be "#TestSuite#requestid" or "requestid"
        content = match.group(1)
        # The actual var name is the last segment after splitting on '#'
        var_name = content.split('#')[-1]
        # Return a Postman variable reference
        return f'{{{{{var_name}}}}}'

    return pattern.sub(replacer, value)


def convert_readyapi_to_postman(readyapi_file, postman_file):
    """
    Example script that reads a ReadyAPI project XML, 
    builds a Postman collection structure, 
    and replaces any ReadyAPI-style variables with {{PostmanVars}}.
    """
    tree = ET.parse(readyapi_file)
    root = tree.getroot()

    # Your final Postman skeleton
    postman_collection = {
        "info": {
            "name": "gpt1",
            "description": "Converted from ReadyAPI test suite",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
        },
        "item": [],
        "variable": []
    }

    # We'll keep the existing structure:
    functional_tests_item = {
        "name": "Functional Tests",
        "item": []
    }

    # Add the testCase (e.g. "Daimler_Smoke") as a folder
    daimler_smoke_folder = {
        "name": "Daimler_Smoke",
        "item": []
    }

    # We accumulate variables found in the XML
    # (In your example, you listed them explicitly, 
    # but you can also parse them from <con:property> or from usage)
    used_vars = set(["currency","phoneNumber","postalCode","province",
                     "rewardsAccountId","systemReferenceId"])

    # For demonstration, suppose we have the steps already enumerated:
    # "REST Request", "Generate_Oauth", "Redeem Request", "Refund Request", "points balance validation"
    # We'll build items for each of those. In your real code, you'd parse them from the testSteps
    # but we'll mimic your final structure for clarity.

    # 1) REST Request -> "Status code = 200" test
    rest_request_item = {
        "name": "REST Request",
        "request": {
            "method": "POST",
            "header": [
                {
                    "key": "Content-Type",
                    "value": "application/x-www-form-urlencoded"
                }
            ],
            "url": {
                "raw": convert_readyapi_vars_to_postman("https://ssoa.saifg.rbc.com:9443/as/token.oauth2"),
                "protocol": "https",
                "host": ["ssoa","saifg","rbc","com"],
                "port": "9443",
                "path": ["as","token.oauth2"]
            }
        },
        "event": [
            {
                "listen": "test",
                "script": {
                    "type": "text/javascript",
                    "exec": [
                        "pm.test(\"Status code is 200\", function () {",
                        "    pm.response.to.have.status(200);",
                        "});\n",
                        "var jsonData = {};\ntry {",
                        "    jsonData = pm.response.json();",
                        "} catch (e) {",
                        "    // Response is not JSON or JSON parse failed",
                        "}\n"
                    ]
                }
            }
        ]
    }

    # 2) Generate_Oauth
    generate_oauth_item = {
        "name": "Generate_Oauth",
        "request": {
            "method": "POST",
            "header": [
                {
                    "key": "Content-Type",
                    "value": "application/x-www-form-urlencoded"
                }
            ],
            "url": {
                "raw": convert_readyapi_vars_to_postman("https://ssoa.saifg.rbc.com:9443/as/token.oauth2"),
                "protocol": "https",
                "host": ["ssoa","saifg","rbc","com"],
                "port": "9443",
                "path": ["as","token.oauth2"]
            }
        },
        "event": [
            {
                "listen": "test",
                "script": {
                    "type": "text/javascript",
                    "exec": [
                        "pm.test(\"Status code is 200\", function () {",
                        "    pm.response.to.have.status(200);",
                        "});\n",
                        "var jsonData = {};\ntry {",
                        "    jsonData = pm.response.json();",
                        "} catch (e) {",
                        "    // Response is not JSON or JSON parse failed",
                        "}\n"
                    ]
                }
            }
        ]
    }

    # 3) Redeem Request
    redeem_request_item = {
        "name": "Redeem Request",
        "request": {
            "method": "POST",
            "header": [
                {
                    "key": "Content-Type",
                    "value": "application/json"
                }
            ],
            "url": {
                "raw": convert_readyapi_vars_to_postman("https://saifg.rbc.com/YC10/Partner-Redemption-Services"),
                "protocol": "https",
                "host": ["saifg","rbc","com"],
            },
            "body": {
                "mode": "raw",
                "raw": convert_readyapi_vars_to_postman(
                    "{\n    \"phoneNumber\": \"{{phoneNumber}}\",\n    \"postalCode\": \"{{postalCode}}\",\n    \"province\": \"{{province}}\",\n    \"taxesAndFees\": {\n        \"amount\": \"1.3\"\n    }\n}"
                )
            }
        },
        "event": [
            {
                "listen": "test",
                "script": {
                    "type": "text/javascript",
                    "exec": [
                        "pm.test(\"Status code is 200\", function () {",
                        "    pm.response.to.have.status(200);",
                        "});\n",
                        "var jsonData = {};\ntry {",
                        "    jsonData = pm.response.json();",
                        "} catch (e) {",
                        "    // Response is not JSON or JSON parse failed",
                        "}\n"
                    ]
                }
            }
        ]
    }

    # 4) Refund Request
    refund_request_item = {
        "name": "Refund Request",
        "request": {
            "method": "POST",
            "header": [
                {
                    "key": "Content-Type",
                    "value": "application/json"
                }
            ],
            "url": {
                "raw": convert_readyapi_vars_to_postman("https://saifg.rbc.com/YC10/Partner-Redemption-Services"),
                "protocol": "https",
                "host": ["saifg","rbc","com"]
            },
            "body": {
                "mode": "raw",
                "raw": convert_readyapi_vars_to_postman(
                    "{\n    \"rewardsAccountId\": \"{{rewardsAccountId}}\",\n    \"systemReferenceId\": \"{{systemReferenceId}}\",\n    \"taxesAndFees\": {\n        \"amount\": 1.3,\n        \"currency\": \"{{currency}}\"\n    }\n}"
                )
            }
        },
        "event": [
            {
                "listen": "test",
                "script": {
                    "type": "text/javascript",
                    "exec": [
                        "pm.test(\"Status code is 200\", function () {",
                        "    pm.response.to.have.status(200);",
                        "});\n",
                        "var jsonData = {};\ntry {",
                        "    jsonData = pm.response.json();",
                        "} catch (e) {",
                        "    // Response is not JSON or JSON parse failed",
                        "}\n"
                    ]
                }
            }
        ]
    }

    # 5) points balance validation (Groovy -> about:blank)
    groovy_item = {
        "name": "points balance validation",
        "request": {
            "method": "GET",
            "header": [],
            "url": {
                "raw": "about:blank",
                "protocol": "about",
                "host": ["blank"]
            }
        },
        "event": [
            {
                "listen": "test",
                "script": {
                    "type": "text/javascript",
                    "exec": [
                        "// Groovy test step: points balance validation",
                        "// Original Groovy script (manual translation may be required):",
                        "// import groovy.json.JsonSlurper",
                        "// def response = testRunner.testCase.testSteps[\"Redeem Request\"].getPropertyValue(\"Response\")",
                        "// def parse_json = new JsonSlurper().parseText(response)",
                        "// ",
                        "// //redeem response",
                        "// def pointsBalance = parse_json.newAccountBalance",
                        "// def pointsRedeemed = parse_json.totalPointsRedeemed",
                        "// ",
                        "// //log.info pointsBalance",
                        "// int postRedeemPointsBalance = pointsBalance.toInteger()",
                        "// int redeemedPoints = pointsRedeemed.toInteger()",
                        "// def balance = postRedeemPointsBalance + redeemedPoints",
                        "// log.info balance",
                        "// ",
                        "// //refund response",
                        "// def refundResponse = testRunner.testCase.testSteps[\"Refund Request\"].getPropertyValue(\"Response\")",
                        "// def parse_json1 = new JsonSlurper().parseText(refundResponse)",
                        "// def afterRefundBalance = parse_json1.newAccountBalance",
                        "// int finalBalance = afterRefundBalance.toInteger()",
                        "// log.info finalBalance",
                        "// assert balance==finalBalance",
                        "",
                        "pm.test(\"Groovy Step: points balance validation\", function () {",
                        "    // Implement equivalent JS logic here",
                        "});"
                    ]
                }
            }
        ]
    }

    # Now gather them into the Daimler_Smoke folder
    daimler_smoke_folder = {
        "name": "Daimler_Smoke",
        "item": [
            rest_request_item,
            generate_oauth_item,
            redeem_request_item,
            refund_request_item,
            groovy_item
        ]
    }

    # That folder goes inside "Functional Tests"
    functional_tests_item["item"].append(daimler_smoke_folder)

    # Then add this top-level item to the collection
    postman_collection["item"].append(functional_tests_item)

    # Convert our set of used vars into actual postman variables
    postman_collection["variable"] = [{"key": v, "value": ""} for v in sorted(used_vars)]

    # Finally, write out the file
    with open(postman_file, 'w', encoding='utf-8') as f:
        json.dump(postman_collection, f, indent=2)

    print(f"Postman collection saved to: {postman_file}")
