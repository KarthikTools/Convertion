import xml.etree.ElementTree as ET
import json
import uuid
import re

ns = {'con': 'http://eviware.com/soapui/config'}

def convert_groovy_to_js(groovy_script):
    js_script = groovy_script.replace('def ', 'let ') \
        .replace('log.info', 'console.log') \
        .replace('testRunner.testCase.testSteps["', 'pm.variables.get("') \
        .replace('"].getPropertyValue("Response")', '")') \
        .replace('new JsonSlurper().parseText', 'JSON.parse') \
        .replace('.toInteger()', 'parseInt()') \
        .replace('assert ', 'pm.expect(').replace('==', ').to.eql(') + ');'
    return "// Converted from Groovy\n" + js_script

def parse_request_body(request_text):
    try:
        return json.loads(request_text)
    except:
        return request_text.strip()

def parse_test_case(test_case):
    case_name = test_case.attrib.get('name')
    properties = {}
    props = test_case.find('con:properties', ns)
    if props:
        for prop in props.findall('con:property', ns):
            key = prop.find('con:name', ns).text
            value = prop.find('con:value', ns).text
            properties[key] = value

    steps = test_case.findall('con:testStep', ns)
    items = []

    for step in steps:
        step_type = step.attrib.get('type')
        step_name = step.attrib.get('name')

        if step_type == 'restrequest':
            config = step.find('con:config', ns)
            method = config.attrib.get('method', 'GET')
            endpoint = config.findtext('con:originalUri', default='{{baseUrl}}', namespaces=ns)
            request_body_text = config.findtext('con:request', default='', namespaces=ns)
            request_body = parse_request_body(request_body_text)
            
            headers = []
            settings = config.find('con:settings', ns)
            if settings:
                for entry in settings.findall('con:setting/con:entry', ns):
                    key = entry.attrib.get('key')
                    value = entry.attrib.get('value')
                    headers.append({'key': key, 'value': value})

            # Assertions
            test_scripts = []
            assertions = config.findall('con:assertion', ns)
            for assertion in assertions:
                assertion_type = assertion.attrib.get('type')
                if assertion_type == "Valid HTTP Status Codes":
                    codes = assertion.findtext('.//codes', namespaces=ns)
                    test_scripts.append(f'pm.test("Status code is {codes}", () => pm.response.to.have.status({codes}));')
                elif assertion_type == "Response SLA Assertion":
                    sla = assertion.findtext('.//SLA', namespaces=ns)
                    test_scripts.append(f'pm.test("Response time below {sla}ms", () => pm.expect(pm.response.responseTime).below({sla}));')
                elif assertion_type.startswith('JSONPath'):
                    path = assertion.findtext('.//path', namespaces=ns).replace('$', '')
                    test_scripts.append(f'pm.test("JSONPath {path} exists", () => pm.expect(_.get(pm.response.json(), "{path}")).to.exist);')

            item = {
                "name": step_name,
                "request": {
                    "method": method,
                    "header": headers,
                    "url": endpoint,
                    "body": {
                        "mode": "raw",
                        "raw": json.dumps(request_body, indent=2)
                    } if request_body else None
                },
                "event": [{
                    "listen": "test",
                    "script": {"type": "text/javascript", "exec": test_scripts}
                }] if test_scripts else []
            }
            items.append(item)

        elif step_type == 'transfer':
            transfers = step.findall('.//con:transfer', ns)
            scripts = []
            for transfer in transfers:
                source = transfer.find('con:source', ns)
                target = transfer.find('con:target', ns)
                source_path = source.attrib.get('sourcePath', '').replace('$', '')
                target_prop = target.attrib.get('property')
                scripts.append(f'pm.variables.set("{target_prop}", _.get(pm.response.json(), "{source_path}"));')
            items[-1]['event'].append({
                "listen": "test",
                "script": {"type": "text/javascript", "exec": scripts}
            })

        elif step_type == 'groovy':
            groovy_script = step.findtext('.//con:script', namespaces=ns)
            js_script = convert_groovy_to_js(groovy_script)
            items[-1]['event'].append({
                "listen": "test",
                "script": {"type": "text/javascript", "exec": js_script.splitlines()}
            })

    return {"name": case_name, "item": items}

def generate_collection(xml_path):
    tree = ET.parse(xml_path)
    root = tree.getroot()

    collection = {
        "info": {
            "name": "ReadyAPI to Postman",
            "_postman_id": str(uuid.uuid4()),
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
        },
        "item": [],
        "variable": [{"key": "baseUrl", "value": "{{baseUrl}}"}]
    }

    suites = root.findall('.//con:testSuite', ns)
    for suite in suites:
        suite_item = {"name": suite.attrib.get('name'), "item": []}

        # Adding getAccessToken and OAuth before each test case
        common_steps = [{"name": "getAccessToken"}, {"name": "OAuth"}]

        test_cases = suite.findall('con:testCase', ns)
        for case in test_cases:
            case_data = parse_test_case(case)
            # prepend common steps
            case_data['item'] = common_steps + case_data['item']
            suite_item['item'].append(case_data)

        collection['item'].append(suite_item)

    return collection

if __name__ == "__main__":
    readyapi_xml = 'readyapi_project.xml'
    postman_json = 'postman_collection.json'
    collection = generate_collection(readyapi_xml)
    with open(postman_json, 'w') as f:
        json.dump(collection, f, indent=2)

    print(f'Postman collection created: {postman_json}')
