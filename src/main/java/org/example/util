elif step_type == "restrequest":
    config = test_step.find('con:config', ns)
    rest_request = config.find('con:restRequest', ns)
    original_uri = normalize_readyapi_variable(rest_request.findtext('con:originalUri', default="", namespaces=ns))
    request_body = normalize_readyapi_variable(rest_request.findtext('con:request', default="", namespaces=ns))
    headers = extract_headers(config)

    resource_path = rest_request.get('resourcePath')
    method_name = rest_request.get('methodName')
    http_method = "POST"  # default fallback

    # Try to resolve method and parameter styles from the interface section
    matched_query_params = []
    matched_headers = []
    interface_section = root.find(".//con:interface", ns)
    if interface_section is not None:
        for resource in interface_section.findall("con:resource", ns):
            if resource.get("path") == resource_path:
                for method in resource.findall("con:method", ns):
                    if method.get("name") == method_name:
                        http_method = method.get("method", "POST")
                        method_parameters = method.find("con:parameters", ns)
                        if method_parameters is not None:
                            for param in method_parameters.findall("con:parameter", ns):
                                param_name = param.get("name")
                                param_style = param.get("style", "QUERY").upper()
                                param_value = ""
                                for entry in rest_request.findall('con:parameters/con:entry', ns):
                                    if entry.get('key') == param_name:
                                        param_value = normalize_readyapi_variable(entry.get('value', ''))
                                        break
                                if param_name and param_value:
                                    if param_style == "HEADER":
                                        matched_headers.append({"key": param_name, "value": param_value})
                                    else:
                                        matched_query_params.append({"key": param_name, "value": param_value})

    postman_request = {
        "name": step_name,
        "request": {
            "method": http_method,
            "header": headers + matched_headers,
            "url": {
                "raw": original_uri,
                "host": [original_uri],
                "query": matched_query_params
            },
            "body": {
                "mode": "raw",
                "raw": request_body or "",
                "options": {
                    "raw": {"language": "json"}
                }
            }
        },
        "event": []
    }

    if pending_pre_script:
        postman_request["event"].append({
            "listen": "prerequest",
            "script": {
                "type": "text/javascript",
                "exec": pending_pre_script
            }
        })
        pending_pre_script = []

    folder["item"].append(postman_request)
    last_rest_step = postman_request
