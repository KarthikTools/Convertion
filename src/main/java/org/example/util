import xml.etree.ElementTree as ET
import json
import re
import os

ns = {'con': 'http://eviware.com/soapui/config'}
external_variables = {}

def normalize_readyapi_variable(value):
    def replacer(match):
        raw_var = match.group(1)
        var_name = raw_var.split('#')[-1].strip()
        external_variables[var_name] = ""
        return f"{{{{{var_name}}}}}"
    return re.sub(r"\$\{#(.*?)\}", replacer, value)

def extract_assertions(rest_request):
    tests = []
    assertions = rest_request.findall('.//con:assertion', ns)
    for assertion in assertions:
        a_type = assertion.get('type')
        name = assertion.get('name')
        if a_type == "Valid HTTP Status Codes":
            tests.append(f'pm.test("{name}", function () {{ pm.response.to.have.status(200); }});')
        elif a_type == "JSONPath Match":
            path = assertion.findtext('.//con:configuration/con:path', namespaces=ns)
            if path:
                tests.append(f'pm.test("Check JSONPath {path}", function () {{ var jsonData = pm.response.json(); pm.expect(jsonData{path}).to.exist; }});')
    return tests

def extract_headers(config):
    headers = []
    for entry in config.findall('.//con:entry', ns):
        key = entry.get('key')
        value = entry.get('value')
        if key and value:
            headers.append({"key": key, "value": normalize_readyapi_variable(value)})
    return headers

def extract_property_transfers(config):
    pre_script = []
    transfers = config.findall('con:transfers', ns)
    for transfer in transfers:
        name = transfer.findtext('con:name', namespaces=ns)
        source_path = transfer.findtext('con:sourcePath', namespaces=ns)
        if name and source_path:
            pre_script.append(f"pm.variables.set('{name}', pm.response.json(){source_path});")
    return pre_script

def convert_readyapi_to_postman(readyapi_file, output_dir, external_vars_file):
    tree = ET.parse(readyapi_file)
    root = tree.getroot()

    os.makedirs(output_dir, exist_ok=True)

    master_collection = {
        "info": {
            "name": "Master Collection",
            "description": "All TestSuites from ReadyAPI",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
        },
        "item": [],
        "variable": []
    }

    for test_suite in root.findall('con:testSuite', ns):
        suite_name = test_suite.get('name') or "Unnamed_Suite"

        suite_folder = {
            "name": suite_name,
            "item": []
        }

        for test_case in test_suite.findall('con:testCase', ns):
            folder = {
                "name": test_case.get('name'),
                "item": []
            }

            pending_pre_script = []
            last_rest_step = None

            for test_step in test_case.findall('con:testStep', ns):
                step_type = test_step.get('type')
                step_name = test_step.get('name')

                if step_type == "transfer":
                    config = test_step.find('con:config', ns)
                    pending_pre_script = extract_property_transfers(config)

                elif step_type == "restrequest":
                    config = test_step.find('con:config', ns)
                    rest_request = config.find('con:restRequest', ns)
                    original_uri = normalize_readyapi_variable(rest_request.findtext('con:originalUri', default="", namespaces=ns))
                    request_body = normalize_readyapi_variable(rest_request.findtext('con:request', default="", namespaces=ns))
                    headers = extract_headers(config)

                    resource_path = rest_request.get('resourcePath')
                    method_name = rest_request.get('methodName')
                    http_method = "POST"  # default fallback

                    matched_query_params = []
                    matched_headers = []
                    interface_section = root.find(".//con:interface", ns)
                    if interface_section is not None:
                        for resource in interface_section.findall("con:resource", ns):
                            if resource.get("path") == resource_path:
                                for method in resource.findall("con:method", ns):
                                    if method.get("name") == method_name:
                                        http_method = method.get("method", "POST")
                                        method_parameters = method.find("con:parameters", ns)
                                        if method_parameters is not None:
                                            for param in method_parameters.findall("con:parameter", ns):
                                                param_name = param.get("name")
                                                param_style = param.get("style", "QUERY").upper()
                                                param_value = ""
                                                for entry in rest_request.findall('con:parameters/con:entry', ns):
                                                    if entry.get('key') == param_name:
                                                        param_value = normalize_readyapi_variable(entry.get('value', ''))
                                                        break
                                                if param_name and param_value:
                                                    if param_style == "HEADER":
                                                        matched_headers.append({"key": param_name, "value": param_value})
                                                    else:
                                                        matched_query_params.append({"key": param_name, "value": param_value})

                    postman_request = {
                        "name": step_name,
                        "request": {
                            "method": http_method,
                            "header": headers + matched_headers,
                            "url": {
                                "raw": original_uri,
                                "host": [original_uri],
                                "query": matched_query_params
                            },
                            "body": {
                                "mode": "raw",
                                "raw": request_body or "",
                                "options": {
                                    "raw": {"language": "json"}
                                }
                            }
                        },
                        "event": []
                    }

                    if pending_pre_script:
                        postman_request["event"].append({
                            "listen": "prerequest",
                            "script": {
                                "type": "text/javascript",
                                "exec": pending_pre_script
                            }
                        })
                        pending_pre_script = []

                    folder["item"].append(postman_request)
                    last_rest_step = postman_request

            suite_folder["item"].append(folder)

        master_collection["item"].append(suite_folder)

    out_path = os.path.join(output_dir, "Master_ReadyAPI_Collection.json")
    with open(out_path, 'w') as f:
        json.dump(master_collection, f, indent=2)

    with open(external_vars_file, 'w') as f:
        json.dump({"variables": [{"key": k, "value": v} for k, v in external_variables.items()]}, f, indent=2)

    print(f" Master Collection saved: {out_path}")
    print(f" External environment variables saved to: {external_vars_file}")
