import xml.etree.ElementTree as ET
import json

ns = {'con': 'http://eviware.com/soapui/config'}

def extract_text(elem, tag):
    child = elem.find(tag, ns)
    return child.text if child is not None else ""

def convert_readyapi_to_postman(readyapi_file, postman_file):
    tree = ET.parse(readyapi_file)
    root = tree.getroot()

    postman_collection = {
        "info": {
            "name": "Daimler_Smoke",
            "description": "Converted from ReadyAPI project",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
        },
        "item": [],
        "variable": []
    }

    # Prepare pre-request folder items for getAccessToken and Oauth
    pre_request_items = []
    
    def create_rest_item(step_name, method, url, headers, body, tests=None, pre_request=None):
        item = {
            "name": step_name,
            "request": {
                "method": method.upper(),
                "header": headers,
                "body": body,
                "url": {
                    "raw": url,
                    "host": [url.split('/')[2]],
                    "path": url.split('/')[3:]
                }
            },
            "event": []
        }
        if pre_request:
            item["event"].append({
                "listen": "prerequest",
                "script": {
                    "type": "text/javascript",
                    "exec": pre_request.strip().split("\n")
                }
            })
        if tests:
            item["event"].append({
                "listen": "test",
                "script": {
                    "type": "text/javascript",
                    "exec": tests.strip().split("\n")
                }
            })
        return item

    for test_suite in root.findall('con:testSuite', ns):
        for test_case in test_suite.findall('con:testCase', ns):
            test_case_name = test_case.get('name')
            folder = {
                "name": test_case_name,
                "item": []
            }

            for test_step in test_case.findall('con:testStep', ns):
                step_type = test_step.get('type')
                step_name = test_step.get('name')
                
                if step_type == 'restrequest':
                    config = test_step.find('con:config', ns)
                    rest_request = config.find('con:restRequest', ns)
                    uri = extract_text(rest_request, 'con:originalUri')
                    method = rest_request.get('method', 'GET')
                    body = {
                        "mode": "urlencoded",
                        "urlencoded": []
                    }
                    for param in rest_request.findall('.//con:parameters/con:entry', ns):
                        key = param.get('key')
                        value = param.get('value')
                        body['urlencoded'].append({"key": key, "value": value, "type": "text"})
                    headers = []
                    for h in rest_request.findall('con:headers/con:entry', ns):
                        headers.append({"key": h.get('key'), "value": h.get('value')})
                    folder["item"].append(create_rest_item(step_name, method, uri, headers, body))

                elif step_type == 'transfer':
                    config = test_step.find('con:config', ns)
                    for transfer in config.findall('con:transfers', ns):
                        name = extract_text(transfer, 'con:name')
                        source_step = extract_text(transfer, 'con:sourceStep')
                        source_path = extract_text(transfer, 'con:sourcePath')
                        # postman script to extract variable from previous response
                        script = f"pm.variables.set(\"{name}\", pm.response.json(){source_path});"
                        folder["item"].append(create_rest_item(f"Transfer {name}", "GET", "http://mock/transfer", [], {}, pre_request=script))

                elif step_type == 'groovy':
                    config = test_step.find('con:config', ns)
                    groovy_script = extract_text(config, 'con:script')
                    # Placeholder conversion logic to JS, can be extended
                    js_script = groovy_script.replace('log.info', 'console.log') \
                                               .replace('assert', 'pm.test("Assert", function () { pm.expect(...) })')
                    folder["item"].append(create_rest_item(step_name, "GET", "http://mock/groovy", [], {}, tests=js_script))

            postman_collection["item"].append(folder)

    with open(postman_file, 'w') as f:
        json.dump(postman_collection, f, indent=2)

if __name__ == "__main__":
    convert_readyapi_to_postman(
        readyapi_file='C://path//to//readyapi.xml',
        postman_file='C://path//to//postman_collection.json'
    )

