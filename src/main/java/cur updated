import xml.etree.ElementTree as ET
import json
import re
from urllib.parse import urlparse

ns = {
    'con': 'http://eviware.com/soapui/config',
    'xsi': 'http://www.w3.org/2001/XMLSchema-instance'
}

def extract_interface_definitions(root):
    """Extract interface definitions from the ReadyAPI XML."""
    interfaces = {}
    for interface in root.findall('.//con:interface[@xsi:type="con:RestService"]', ns):
        interface_name = interface.get('name')
        interface_id = interface.get('id', interface_name)  # Use id if available, fallback to name
        endpoints = [endpoint.text for endpoint in interface.findall('.//con:endpoint', ns)]
        resources = {}
        
        for resource in interface.findall('.//con:resource', ns):
            path = resource.get('path', '')
            methods = {}
            
            for method in resource.findall('.//con:method', ns):
                method_name = method.get('name')
                http_method = method.get('method', 'GET')
                parameters = []
                
                # Get parameters from resource level
                for param in resource.findall('.//con:parameters/con:parameter', ns):
                    param_name = param.findtext('con:name', namespaces=ns)
                    param_style = param.findtext('con:style', namespaces=ns)
                    param_default = param.findtext('con:default', namespaces=ns)
                    param_required = param.findtext('con:required', namespaces=ns) == 'true'
                    
                    parameters.append({
                        'name': param_name,
                        'style': param_style.upper() if param_style else 'QUERY',  # Default to QUERY
                        'default': param_default,
                        'required': param_required
                    })
                
                # Get parameters from method level
                for param in method.findall('.//con:parameters/con:parameter', ns):
                    param_name = param.findtext('con:name', namespaces=ns)
                    param_style = param.findtext('con:style', namespaces=ns)
                    param_default = param.findtext('con:default', namespaces=ns)
                    param_required = param.findtext('con:required', namespaces=ns) == 'true'
                    
                    parameters.append({
                        'name': param_name,
                        'style': param_style.upper() if param_style else 'QUERY',
                        'default': param_default,
                        'required': param_required
                    })
                
                methods[method_name] = {
                    'http_method': http_method,
                    'parameters': parameters
                }
            
            resources[path] = methods
        
        interfaces[interface_id] = {
            'name': interface_name,
            'endpoints': endpoints,
            'resources': resources
        }
    
    return interfaces

def find_matching_interface_resource(interfaces, interface_id, path):
    """Find the matching interface resource for a given interface ID and path."""
    if interface_id not in interfaces:
        return None, None, None
    
    interface = interfaces[interface_id]
    for resource_path, methods in interface['resources'].items():
        # Simple path matching - could be enhanced with more sophisticated matching
        if path.endswith(resource_path):
            return interface, resource_path, methods
    
    return None, None, None

def convert_readyapi_vars_to_postman(value: str) -> str:
    """
    Converts ReadyAPI variable references of the form:
      ${#TestSuite#requestid} or ${requestid}
    into Postman variables of the form:
      {{requestid}}
    """
    if not value:
        return value

    pattern = re.compile(r'\$\{([^}]+)\}')
    def replacer(match):
        content = match.group(1)
        var_name = content.split('#')[-1]
        return f'{{{{{var_name}}}}}'

    return pattern.sub(replacer, value)

def extract_assertions(rest_request):
    tests = []
    assertions = rest_request.findall('.//con:assertion', ns)
    for assertion in assertions:
        a_type = assertion.get('type')
        name = assertion.get('name')
        if a_type == "Valid HTTP Status Codes":
            codes = assertion.findtext('.//con:configuration/con:codes', namespaces=ns)
            tests.append(f'pm.test("{name}", function () {{ pm.response.to.have.status({codes}); }});')
        elif a_type == "JSONPath Match":
            path = assertion.findtext('.//con:configuration/con:path', namespaces=ns)
            expected = assertion.findtext('.//con:configuration/con:expectedContent', namespaces=ns)
            if path:
                if expected:
                    tests.append(f'pm.test("Check JSONPath {path}", function () {{ var jsonData = pm.response.json(); pm.expect(jsonData{path}).to.eql({expected}); }});')
                else:
                    tests.append(f'pm.test("Check JSONPath {path}", function () {{ var jsonData = pm.response.json(); pm.expect(jsonData{path}).to.exist; }});')
    return tests

def extract_headers(config):
    headers = []
    for entry in config.findall('.//con:entry', ns):
        key = entry.get('key')
        value = entry.get('value')
        if key and value:
            key = convert_readyapi_vars_to_postman(key)
            value = convert_readyapi_vars_to_postman(value)
            headers.append({"key": key, "value": value})
    return headers

def extract_property_transfers(config):
    pre_script = []
    transfers = config.findall('con:transfers', ns)
    for transfer in transfers:
        name = transfer.findtext('con:name', namespaces=ns)
        source_path = transfer.findtext('con:sourcePath', namespaces=ns)
        if name and source_path:
            name = convert_readyapi_vars_to_postman(name)
            source_path = convert_readyapi_vars_to_postman(source_path)
            pre_script.append(f"pm.variables.set('{name}', pm.response.json(){source_path});")
    return pre_script

def convert_groovy_to_postman_js(groovy_script: str) -> list:
    js_lines = ["// Converted from Groovy script"]
    for line in groovy_script.splitlines():
        original = line
        line = line.strip()
        if not line:
            js_lines.append("")
            continue
        if line.startswith("//"):
            js_lines.append(line)
            continue
        line = re.sub(r"log\.info\((.+?)\)", r"console.log(\1);", line)
        if "new JsonSlurper().parseText(" in line:
            continue
        match = re.search(r'def (\w+)\s*=\s*testRunner\.testCase\.testSteps\["(.+?)"\]\.getPropertyValue\("(.+?)"\)', line)
        if match:
            var_name, step, prop = match.groups()
            js_lines.append(f"let {var_name} = pm.collectionVariables.get('{step}_{prop}');")
            continue
        match = re.search(r'def (\w+)\s*=\s*parse_json\.(.+)', line)
        if match:
            var_name, field = match.groups()
            js_lines.append(f"let {var_name} = pm.response.json().{field};")
            continue
        line = re.sub(r'int (\w+)\s*=\s*(\w+)\.toInteger\(\)', r"let \1 = parseInt(\2);", line)
        match = re.search(r'assert (.+?)\s*==\s*(.+)', line)
        if match:
            left, right = match.groups()
            js_lines.append(f"pm.test('Assert {left.strip()} == {right.strip()}', function () {{")
            js_lines.append(f"    pm.expect({left.strip()}).to.eql({right.strip()});")
            js_lines.append("});")
            continue
        line = re.sub(r'\bdef\b', 'let', line)
        js_lines.append(f"// Unhandled: {original.strip()}")
        js_lines.append(line)
    return js_lines

def convert_readyapi_to_postman(readyapi_file, postman_file):
    tree = ET.parse(readyapi_file)
    root = tree.getroot()

    # Extract interface definitions first
    interfaces = extract_interface_definitions(root)

    postman_collection = {
        "info": {
            "name": "Daimler_Smoke",
            "description": "Converted from ReadyAPI project",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
        },
        "item": [],
        "event": [],
        "variable": []
    }

    for test_suite in root.findall('con:testSuite', ns):
        for test_case in test_suite.findall('con:testCase', ns):
            folder = {
                "name": test_case.get('name'),
                "item": []
            }

            pending_pre_script = []
            last_rest_step = None

            for test_step in test_case.findall('con:testStep', ns):
                step_type = test_step.get('type')
                step_name = test_step.get('name')

                if step_type == "transfer":
                    config = test_step.find('con:config', ns)
                    pending_pre_script = extract_property_transfers(config)

                elif step_type == "restrequest":
                    config = test_step.find('con:config', ns)
                    rest_request = config.find('con:request', ns)
                    interface_id = config.get('interface')
                    endpoint = rest_request.findtext('con:endpoint', namespaces=ns)
                    path = rest_request.findtext('con:path', namespaces=ns)
                    method = rest_request.findtext('con:method', namespaces=ns)
                    media_type = rest_request.findtext('con:mediaType', namespaces=ns)

                    # Find matching interface resource
                    interface, resource_path, methods = find_matching_interface_resource(interfaces, interface_id, path)
                    
                    # Get parameters from interface definition if available
                    parameters = []
                    headers = []
                    if methods:
                        for method_name, method_info in methods.items():
                            if method_info['http_method'] == method:
                                for param in method_info['parameters']:
                                    param_name = param['name']
                                    param_style = param['style']
                                    param_default = param['default']
                                    
                                    # Find the parameter value from the request
                                    param_value = param_default  # Use default if no value provided
                                    for req_param in rest_request.findall('.//con:parameters/con:parameter', ns):
                                        if req_param.findtext('con:name', namespaces=ns) == param_name:
                                            param_value = req_param.findtext('con:value', namespaces=ns)
                                            break
                                    
                                    if param_style == 'QUERY':
                                        parameters.append({
                                            "key": param_name,
                                            "value": convert_readyapi_vars_to_postman(param_value)
                                        })
                                    elif param_style == 'HEADER':
                                        headers.append({
                                            "key": param_name,
                                            "value": convert_readyapi_vars_to_postman(param_value)
                                        })

                    # Add any additional headers from the request
                    headers.extend(extract_headers(rest_request))

                    request_body = rest_request.findtext('con:request', default="", namespaces=ns)
                    request_body = convert_readyapi_vars_to_postman(request_body)

                    postman_request = {
                        "name": step_name,
                        "request": {
                            "method": method,
                            "header": headers,
                            "url": {
                                "raw": f"{endpoint}{path}",
                                "host": [urlparse(endpoint).netloc],
                                "path": [p for p in path.split('/') if p],
                                "query": parameters
                            },
                            "body": {
                                "mode": "raw",
                                "raw": request_body,
                                "options": {
                                    "raw": {"language": "json" if media_type == "application/json" else "text"}
                                }
                            }
                        },
                        "event": []
                    }

                    if pending_pre_script:
                        postman_request["event"].append({
                            "listen": "prerequest",
                            "script": {
                                "type": "text/javascript",
                                "exec": pending_pre_script
                            }
                        })
                        pending_pre_script = []

                    # Add assertions from the request
                    assertion_scripts = extract_assertions(config)
                    if assertion_scripts:
                        postman_request["event"].append({
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": assertion_scripts
                            }
                        })

                    folder["item"].append(postman_request)
                    last_rest_step = postman_request

                elif step_type == "groovy":
                    script = test_step.findtext('.//con:config/con:script', namespaces=ns)
                    js_script = convert_groovy_to_postman_js(script)
                    if last_rest_step and js_script:
                        last_rest_step.setdefault("event", [])
                        last_rest_step["event"].append({
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": js_script
                            }
                        })

                elif step_type == "assertionteststep":
                    assertions = test_step.findall('.//con:assertion', ns)
                    assertion_scripts = []
                    for assertion in assertions:
                        assertion_scripts.extend(extract_assertions(assertion))
                    if last_rest_step and assertion_scripts:
                        last_rest_step.setdefault("event", [])
                        last_rest_step["event"].append({
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": assertion_scripts
                            }
                        })

            postman_collection["item"].append(folder)

    with open(postman_file, 'w', encoding='utf-8') as f:
        json.dump(postman_collection, f, indent=2)

    print(f"Postman collection saved to: {postman_file}")
